import {urlToRequest} from "loader-utils";
// import {validate} from "schema-utils";
import fileSystem from "node:fs";

const schema = {
    type: "object",
    properties: {
        test: {
            type: "string",
        },
    },
};

export default function makeTyping(source: string): string {
    // eslint-disable-next-line @typescript-eslint/no-invalid-this, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
    // @ts-ignore
    const pathToNewFile: string = `${urlToRequest(this.resourcePath)}.d.ts`;

    const exportList: Array<string> = source
        .split("\n")
        .map<string>((line: string): string => {
            if (!/export\s+var\s+\S+?\s*=\s*\S+?;/u.test(line)) {
                return "";
            }

            const exportKey: string = line.replace("export var ", "").split("=").at(0)?.trim() ?? "";

            if (exportKey === "") {
                return "";
            }

            return `    '${exportKey}': string;`;
        })
        .filter<string>((line: string): line is string => {
            return line.trim() !== "";
        });

    const typingContent: string =
        exportList.length > 0
            ? `// Do not change. This file is automatically generated.
interface CssExport {
${exportList.join("\n")}
}
export const cssExport: CssExport;
export default cssExport;
`
            : "export default {}";

    fileSystem.writeFile(pathToNewFile, typingContent, {flag: "w+"}, (error: NodeJS.ErrnoException | null) => {
        if (error) {
            console.error(error);
        }
    });

    return source;
}
